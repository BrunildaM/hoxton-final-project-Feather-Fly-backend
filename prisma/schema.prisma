// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  gender    String // to give the title on the ticket Mr Mrs or Ms
  age       Int // only adults can have account
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      String    //user or admin
  bookings  Booking[]
}

model Passanger {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  gender    String // to give the title on the ticket Mr Mrs or Ms
  age       Int
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId Int
}

model Booking {
  id        Int         @id @default(autoincrement())
  passanger User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flight    Flight      @relation(fields: [flightId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  flightId  Int
  tickets   Ticket[]
  passangers Passanger[]
}

model Ticket {
  id        Int      @id @default(autoincrement())
  price     Int
  seat      String
  // type      String  @default("one-way") // one way or return may be into two different models
  status    String   @default("available") //available or booked 
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  baggage   String
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade) //this will specify if its booked
  bookingId Int?
  flight    Flight   @relation(fields: [flightId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flightId  Int
  classId   Int
}

model Class {
  id              Int             @id @default(autoincrement())
  name            String //Economy, business or first class
  tickets         Ticket[]
  classCapacities ClassCapacity[]
}

model ClassCapacity {
  id       Int   @id @default(autoincrement())
  plane    Plane @relation(fields: [planeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class    Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  capacity Int
  planeId  Int
  classId  Int
}

model Flight {
  id                Int        @id @default(autoincrement())
  flightNumber      String
  departsFrom       Airport    @relation("departure", fields: [departureFlightId], references: [id]) //departure airport
  arrivesAt         Airport    @relation("arrival", fields: [arrivalFlightId], references: [id]) //destination 
  // date              DateTime // This may not be needed
  departureTime     DateTime
  arrivalTime       DateTime
  status            String     @default("OK") //Ok or cancelled 
  bookings          Booking[]
  tickets           Ticket[]
  flyCompany        FlyCompany @relation(fields: [flyCompanyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flyCompanyId      Int
  plane             Plane      @relation(fields: [planeId], references: [id])
  departureFlightId Int
  arrivalFlightId   Int
  planeId           Int
}

model Plane {
  id              Int             @id @default(autoincrement())
  capacity        Int
  flyCompany      FlyCompany      @relation(fields: [flyCompanyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flyCompanyId    Int
  classCapacities ClassCapacity[]
  flights         Flight[]
}

model FlyCompany {
  id       Int       @id @default(autoincrement())
  logo     String
  name     String
  planes   Plane[]
  airports Airport[]
  flights  Flight[]
}

model Airport {
  id               Int          @id @default(autoincrement())
  location         String
  name             String
  flyCompanies     FlyCompany[]
  departureFlights Flight[]     @relation("departure")
  arrivalFlights   Flight[]     @relation("arrival")
}
